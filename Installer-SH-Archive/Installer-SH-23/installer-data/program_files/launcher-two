#!/usr/bin/env bash
# Script version 1.0
# This can help avoid application version conflicts, but requires special preparation.
# WARNING! This is not intended for applications that are installed in system mode.
# WARNING! This is an experimental feature.
#

Path_To_Script="$( dirname "$(readlink -f "$0")")"

export PATH="$PATH:$Path_To_Script/program-two"
export HOME="$Path_To_Script/userdata-two"

export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"

application_exec="$Path_To_Script/program-two/application-two"

$application_exec "$@"

exit_code="$?"

if [[ "$exit_code" != "0" ]]; then
	StringMessage="bash -c \"echo \"-\"; echo \"$application_exec\"; echo \"-\"; echo \"WARNING!\ EXIT\ CODE\ -\ $exit_code\"; echo \"The\ program\ has\ terminated\ incorrectly!\"; echo \"Is\ the\ program\ incompatible\ with\ the\ current\ OS?\"; echo \"Does\ the\ program\ contain\ errors?\"; read pause\""
	
	terminal_executable="x-terminal-emulator"
	if ! type "x-terminal-emulator" &> /dev/null; then
		if type "xfce4-terminal" &> /dev/null; then terminal_executable="xfce4-terminal"
		elif type "konsole" &> /dev/null; then terminal_executable="konsole"
		elif type "gnome-terminal" &> /dev/null; then terminal_executable="gnome-terminal"
		elif type "xterm" &> /dev/null; then terminal_executable="xterm"
		elif type "uxterm" &> /dev/null; then terminal_executable="uxterm"; fi
	fi
	
	$terminal_executable -e "$StringMessage"
fi
